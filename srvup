#!/usr/bin/env python3

from getpass import getpass
from enum import Enum
import shutil
import subprocess


class OS(Enum):
    Fedora = 1
    Ubuntu = 2
    Proxmox = 3
    Wireguard = 4


class Server:
    def __init__(self, ip, os, user, nickname, docker_path=""):
        self.ip = ip
        self.os = os
        self.user = user
        self.nickname = nickname
        self.docker_path = docker_path

    def __str__(self):
        return f"{self.user}@{self.ip} ({self.os})"


servers = [
    Server("192.168.68.112", OS.Proxmox, "leah", "PVE Hypervisor"),
    Server("192.168.68.109", OS.Wireguard, "root", "Wireguard"),
    Server("192.168.68.114", OS.Fedora, "leah", "Alpha Proxy"),
    Server("192.168.68.107", OS.Fedora, "leah", "Alpha Wiki"),
    Server("192.168.68.120", OS.Ubuntu, "leah", "Jellyfin"),
    Server("192.168.68.126", OS.Fedora, "leah", "Miniflux"),
]


def main():
    if not shutil.which("sshpass"):
        print("You need sshpass!!!")
        exit(1)
    # I use the same password for them all XD
    password = getpass("Password for servers: ")
    for server in servers:
        print(f" [I] Updating {server}!")
        update_cmds = []
        match server.os:
            case OS.Fedora:
                update_cmds = [f"echo {password} | sudo -S dnf update -y"]
            case OS.Ubuntu:
                update_cmds = [
                    f"echo {password} | sudo -S apt update",
                    f"echo {password} | sudo -S apt dist-upgrade -y",
                ]
            case OS.Proxmox:
                update_cmds = [
                    f"echo {password} | sudo -S apt update",
                    f"echo {password} | sudo -S apt dist-upgrade -y",
                ]
            case OS.Wireguard:
                # I use the proxmox helper scripts' wireguard
                # LXC Conatiner, Under the hood it's just Debian 12.
                update_cmds = ["apt update", "apt dist-upgrade -y"]
        for update_cmd in update_cmds:
            cmd = [
                "sshpass",
                f"-p{password}",
                "ssh",
                "-t",
                f"{server.user}@{server.ip}",
                update_cmd,
            ]
            print(f" [V] Running: {str(cmd).replace(password, '__PASSWORD__')}")
            subprocess.run(cmd)
        print(f" [I] Done with {server}!")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n:(")
    exit(0)
