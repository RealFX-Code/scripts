#!/usr/bin/env python3

import platform
import shutil
import subprocess
import getpass

def os_not_supported_error():
    print(" [!] Sorry, Your OS isn't supported.")
    print("     If you have the time, please ")
    print("     contribute an update snippet at:")
    print("     https://github.com/RealFX-Code/scripts")

def find_elevation():

    if shutil.which("sudo"):
        return "sudo"
    elif shutil.which("doas"):
        return "doas"
    elif getpass.getuser() == "root" or \
         getpass.getuser() == "Administrator":
        return ""
    else:
        print(" [W] No elevation method was detected as installed,")
        print("     And you're not running as ROOT.")
        print("     ")
        print("     THINGS MAY BREAK!")
        print("     ")

def handle_linux_update():
    def do_arch_update():
        if shutil.which("paru"):
            print(" [I] Paru update")
            subprocess.run([find_elevation(), "paru"])
        elif shutil.which("yay"):
            print(" [I] Yay update")
            subprocess.run([find_elevation(), "yay"])
        else:
            # Fallback to regular Pacman
            print(" [I] Pacman update")
            subprocess.run([find_elevation(), "pacman", "-Syyuu"])
        exit(0)
    def do_gentoo_update():
        elevation = find_elevation()
        subprocess.run([elevation, "emaint", "--auto", "sync"])
        subprocess.run([elevation, "emerge","-avuDNU", "--with-bdeps=y", "@world"])
        print(" [W] You should depclean your system manually!")
        exit(0)
    def do_debian_update():
        elevation = find_elevation()
        subprocess.run([elevation, "apt", "update"])
        subprocess.run([elevation, "apt", "upgrade"])
        subprocess.run([elevation, "apt", "autoremove"])

    distro = platform.freedesktop_os_release()["NAME"]

    match distro:
        case "CachyOS Linux" | "EndeavourOS" | "Artix" | "Arch Linux":
            print(" [I] Arch-based OS Update")
            do_arch_update()
        case "Gentoo" | "Funtoo":
            print(" [I] Gentoo-based OS Update")
            do_gentoo_update()
        case "Debian GNU/Linux" | "Trisquel" | "Ubuntu":
            print(" [I] Debian-based OS Update")
            do_debian_update()
        case _:
            print(" [F] Your distro isn't supported!")
            print("     Current distro: " + distro)
            os_not_supported_error()
            exit(1)

def handle_freebsd_update():
    elevation = find_elevation()
    subprocess.run([elevation, "pkg", "update"])
    subprocess.run([elevation, "pkg", "upgrade"])

def handle_windows_update():
    # This is only for "windows-native" package managers;
    # That means that cygwin or msys2 doesn't count.
    #
    # Windows' quirks:
    #  - No admin need for most package managers,
    #    They'll ask for it themselvs.
    #
    if shutil.which("winget"):
        print(" [I] Upgrading with winget...")
        subprocess.run(["winget", "upgrade", "--all", "--verbose", "--include-unknown"])
    if shutil.which("scoop"):
        print(" [I] Upgrading with scoop...")
        subprocess.run(["scoop", "update", "*"])
    if shutil.which("choco"):
        print(" [I] Upgrading with choco...")
        subprocess.run(["choco", "upgrade", "all"])

def handle_darwin_update():
    if shutil.which("softwareupdate"):
        print(" [I] Forcing system update check...")
        subprocess.run(["softwareupdate", "-l"])

    if shutil.which("brew"):
        print(" [I] Updating homebrew...")
        brew_update_steps = ["update","upgrade","autoremove","cleanup","doctor"]
        for step in brew_update_steps:
            subprocess.run(["brew", step])


if __name__ == "__main__":
    print("      _____   _____ _   _ ___ ")
    print("     / __\\ \\ / / __| | | | _ \\")
    print("     \\__ \\\\ V /\\__ \\ |_| |  _/")
    print("     |___/ |_| |___/\\___/|_|  ")
    print("")
    match platform.system():
        case "Linux":
            handle_linux_update()
        case "FreeBSD":
            handle_freebsd_update()
        case "Darwin":
            handle_darwin_update()
        case "Windows":
            handle_windows_update()
        case _:
            print(" [F] Your platform isn't supported!")
            print("     Platform: " + platform.system())
            os_not_supported_error()
    exit(0)
